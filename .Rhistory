library(huxtable)
print_latex(ht)
library(huxtable)
print_latex(ht)
'\'
'\\'
cat('\')
')
cat('\\')
?'"'
?writeLines
writeLines('\')
')
writeLines('\\')
print('\\')
library(huxtable)
library(huxtable)
?knitr::latex_dependency
?rmarkdown::latex_dependency
?rmarkdown::pdf_document
library(huxtable)
?knit_print
library(huxtable)
knit_print
knitr::knit_print
library(huxtable)
?knitr::opts_knit
?rmarkdown::pdf_document
?rmarkdown::all_output_formats
?rmarkdown::default_output_format
library(huxtable)
library(huxtable)
?do.call
?knit_print
library(huxtable)
library(huxtable)
library(huxtable)
?rmarkdown::latex_dependency
?rmarkdown::latex_dependencies
library(huxtable)
??lorem
library(test_that)
library(testthat)
knitr::opts_chunk$set(echo = TRUE)
library(huxtable)
ht <- huxtable(a = rnorm(5), b = letters[1:5])
align(ht)[,1] <- 'left'
align(ht) <- 'left'
ht <- huxtable(a = rnorm(5), b = letters[1:5])
valign(ht)[1,1] <- 'centre'
valign(ht)[1,1] <- 'middle'
library(huxtable)
expect_identical(NA, NA)
expect_identical(NA, 1)
expect_identical(1, NA)
library(huxtable)
valign(ht)[1, 1] <- NA
valign(ht)
valign(ht) <- 'top'
valign(ht)[1, 1] <- NA
valign(ht)
valign(ht)[1, 1]
expect_identical(valign(ht)[1, 1], NA)
?expect_identical
expect_identical(valign(ht)[1, 1], NA_character_)
?width
library(huxtable)
formatC(rnorm(5), digits = 1:5)
knitr::opts_chunk$set(echo = TRUE)
library(huxtable)
ht <- huxtable(a = 10 ^ sample(1:5), b = letters[1:5])
ht
ht$a
formatC(ht$a, digits = 5)
formatC(ht$a, digits = 5, format = 'f')
formatC(ht$a,  format = 'f')
formatC(ht$a,  format = 'f', digits = 0)
align(ht)
align(ht)[,1] <- 'left'
align(ht)
to_latex(ht)
print_latex(ht)
library(huxtable)
library(huxtable)
latex_dependency
?latex_dependency
is.numeric(NA)
is.numeric(1)
is.integer(1)
is.integer(1L)
tmp <- matrix(1:4,2)
tmp[2,2] <- NA
is.numeric(tmp)
tmp <- matrix(1:12, 4)
tmp
rowspan <- matrix(1, 4, 3)
rowspan
rowspan[2,1] <- 2
rowspan[3,2] <- 2
rowspan[4,1] <- 3
rowspan
apply(rowspan - 1, 1, cumsum )
rowspan - 1
apply(rowspan - 1, 1, cumsum)
t(apply(rowspan - 1, 1, cumsum))
rowspan
rs <- rowspan - 1
rs
row(rs)
col(rs)
col(rs) > rs
col(rs) - 1 > rs
rowspan
col(rs)
rs
col(rs)
rs + col(rs)
rs + col(rs) -> tmp2
col(rs) < rs
col(rs) <= rs
col(rs) < rs
col(rs)
rs
rowspan
rowspan[,4] <- c(1,2,1,1)
rowspan <- cbind(rowspan, c(1,2,1,1))
rowspan <- cbind(rowspan, c(1,1,1,1))
rowspan
rowspan - 1
colspan <- rowspan
colspan
cs <- colspan - 1
cs
cs1 <- cs[1,]
cs
cs1
cs2 <- cs[2,]
cs2
cumsum(cs2)
c(0, cumsum(cs2)[1:4])
cumsum(cs2) - 1:5
c(0 , cs2)
1:5
cs2
colspan[2,]
1:5 < colspan[2,]
cs2 <- colspan[2,]
cs2
cs2 + 1:5
cs2 - 1 + 1:5
cs2 - 1 + 1:5 > 1:5
cs2
c(0, cs2 - 1 + 1:5) > 1:6
c(0, cs2 - 1 + 1:5) > 0:5
cs2 - 1 + 1:5
cs2 - 1 + 1:5 -> cs2x
cs2x > lag(cs2x)
cs2x < lag(cs2x)
cs2x <= lag(cs2x)
colspan
colspan + col(colspan) - 1
colspan
t(apply(colspan, 1, cummax))
coverage <- colspan - 1 + col(colspan)
t(apply(coverage, 1, cummax))
colspan
dput(colspan)
colspan <- structure(c(1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
1, 1, 1), .Dim = 4:5)
colspan
coverage <- colspan - 1 + col(colspan)
coverage
cum_coverage <- t(apply(coverage, 1, cummax))
cum_coverage
col(colspan) < cum_coverage
colspan
cbind(NA, cum_coverage)
cum_coverage
cbind(0, cum_coverage) < cbind(cum_coverage, 0)
cum_coverage
col(colspan) <= cum_coverage
col(colspan) < cum_coverage
col(colspan) + 1 < cum_coverage
col(colspan) < cum_coverage
cbind(FALSE, covered[,1:4])
covered <- col(colspan) < cum_coverage
cbind(FALSE, covered[,1:4])
colspan
colspan <- matrix(1, 6,5)
colspan
colspan[6,1] <- 2
colspan[6,4] <- 2
colspan[4,2] <- 3
colspan
#' @export
#' @export
coverage <- colspan - 1 + col(colspan)
coverage
isTRUE(NA)
isTRUE(foo <- NA)
any(c(NA, T))
rowspan <- matrix(1, 2)
rowspan
rowspan <- matrix(1, 2,2)
rowspan
rowspan[2,2] <- 2
rowspan
rowspan - 1 + row(rowspan)
rowspan - 1 + row(rowspan) > nrow(rowspan)
foo <- 3 > 2
foo
library(huxtable)
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
rowspan(ht)[1:2,1] <- 2
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
rowspan(ht)[1:2,1] <- 2
library(huxtable)
rowspan(ht)[1:2,1] <- 2
ht
rowspan(ht)
print_html(ht)
tmp <- c(NA, 1,1,1)
tmp <- matrix(tmp, 2, 2)
tmp
tmp[is.na(tmp)]
tmp[is.na(tmp)] <- 3
tmp
tmp[1,1] <- NA
tmp[2,2] <- NA
tmp
tmp[is.na(tmp)] <- 3
tmp
tmp[] <- list(a=1)$a
tmp
tmp[] <- c(a=1)['a']
tmp
library(huxtable)
ht
colspan(ht)
ht <- huxtable(a = 1:3, b = letters[1:3])
colspan(ht)
rowspan(ht)
?testthat::expect_identical
?testthat::expect_identical
library(huxtable)
ht
rowspan(ht)[1,1] <- 2
ht
print_html(ht)
oer
print_html(ht)
rn
cn
covered
row_or_col
spans
coverage
cum_coverage
indexfun(spans)
covered <- indexfun(spans) < cum_coverage
covered
covered[rn, cn]
row_or_col
rbind(FALSE, covered[1:(nrow(covered) - 1), ])
library(huxtable)
rowspan(ht)[1,1] <- 2
rowspan(ht)
print_html(ht)
ht
library(huxtable)
rowspan(ht)
ht
print_html(ht)
ht <- huxtable(a = 1:3, b = letters[1:3])
colspan(ht)[2:3,1] <- 2
colspan(ht)
print_html(ht)
matrix(T, 2, 2)
matrix(T, 2, 2) & matrix(F, 2, 2)
matrix(T, 2, 2) | matrix(F, 2, 2)
library(huxtable)
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
align(ht)
switch(NA, left=1, right=, 3)
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
align(ht)
valign(ht)
cell_shadows(ht)
huxtable::cell_shadows(ht)
huxtable:::cell_shadows(ht)
spans
huxtable:::cell_shadows %>% debug
huxtable:::cell_shadows(ht)
row_or_col
spanfun(ht)
c(rowspan = 1, colspan = 1, align = 'center', valign = 'middle')
list(rowspan = 1, colspan = 1, align = 'center', valign = 'middle')
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
valign(ht)
source('~/huxtable/R/huxtable.R', echo=TRUE)
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
valign(ht)
huxtable:::huxtable_default_attrs
huxtable:::huxtable_default_attrs[['valign']]
huxtable:::huxtable_default_attrs['valign']
huxtable:::huxtable_default_attrs[['valign']]
as_tibble(table(a = 1:3, b = 1:3))
tibble::as_tibble(table(a = 1:3, b = 1:3))
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
valign(ht)
debug(huxtable:::as_huxtable.default)
ht <- huxtable(a = 1:3, b = letters[1:3])
debug(huxtable:::as_huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
debug(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
as_huxtable(ht)
class(ht)
?roxygen2::roclet
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
?class
tb <- tibble(a = 1:3, b = letters[1:3])
tb
as_huxtable(tb)
as_huxtable(tb)
ls()
rm(pat='*')
?rm
rm(list=ls())
ls()
library(huxtable)
ht <- huxtable(a = 1:3, b = letters[1:3])
ht
align(ht)
colspan(ht)
rowspan(ht)
unlink('tmp-testing-doc_cache', recursive = TRUE)
knit_with_parameters('~/huxtable/tmp-testing-doc.Rmd')
ht_orig <- huxtable(a = 10 ^ sample(1:5), b = letters[1:5])
ht_orig$a <- formatC(ht_orig$a,  format = 'f', digits = 0)
ht <- ht_orig
colspan(ht)[1,1] <- 2
print_latex(ht)
library(huxtable)
print_latex(ht)
ht <- ht_orig
rowspan(ht)[1,1] <- 2
print_latex(ht)
?match.call
match.call(get, call("get", "abc", i = FALSE, p = 3))
fun <- function(x, lower = 0, upper = 1) {
structure((x - lower) / (upper - lower), CALL = match.call())
}
fun(4 * atan(1), u = pi)
fun <- function(a, ...)
{}
fun <- function(a, ...) match.call(expand.dots = TRUE)
fun(1,2)
fun <- function(a, ...) match.call(expand.dots = FALSE)
fun(1,2)
fun <- function(a, ..., b) match.call(expand.dots = FALSE)
fun(1,2)
fun(1,2,3)
fun <- function(a, ..., b) match.call(expand.dots = T)
fun(1,2,3)
fun <- function(a=5, ..., b) match.call(expand.dots = T)
fun(1,2,3)
fun <- function(a, ..., b = 5) match.call(expand.dots = T)
fun(1,2,3)
fun <- function(a,  b = 5) match.call(expand.dots = T)
fun(1,2,3)
fun(1,2)
fun(1)
fun <- function(a,  b = 5) match.call(expand.dots = F)
fun(1)
fun(1,2)
1 %!in% 2:5
subset
subset.default
subset.data.frame
transform.data.frame
?transform
example(transform)
ls()
rm(fun)
library(huxtable)
ht_orig <- huxtable(a = 10 ^ sample(1:5), b = letters[1:5])
ht_orig$a <- formatC(ht_orig$a,  format = 'f', digits = 0)
ht_orig
class(ht_orig)
to_screen(ht_orig)
huxtable::to_screen(ht_orig)
huxtable:::to_screen(ht_orig)
print(ht_orig)
debug(print.huxtable)
as_tibble(ht_orig)
tibble::as_tibble(ht_orig)
tmp <- tibble(a=1:3)
tmp
as_tibble(tmp)
tibble::as_tibble(tmp)
tmp[1,]
?unclass
unclass(tmp)
unclass(tmp) %>% as.data.frame
library(huxtable)
ht_orig <- huxtable(a = 10 ^ sample(1:5), b = letters[1:5])
ht_orig$a <- formatC(ht_orig$a,  format = 'f', digits = 0)
ht <- ht_orig
rowspan(ht)[1,1] <- 2
print_latex(ht)
print_latex(ht)
ht
print_latex(ht)
library(huxtable)
library(huxtable)
library(huxtable)
library(huxtable)
f <- function(x) substitute(x)
g <- function(x) deparse(f(x))
g(1:10)
g(x)
g(x + y ^ 2 / z + exp(a * sin(b)))
c(2,NULL,3)
c()
library(huxtable)
library(huxtable)
library(huxtable)
ht_orig <- huxtable(a = 10 ^ sample(1:5), b = letters[1:5])
width(ht_orig)
ls()
?width
library(huxtable)
?width
huxtable::width
huxtable:::width
library(huxtable)
?col_widths
library(huxtable)
library(huxtable)
?rmarkdown::latex_dependency
library(colorspace)
?hex
hex('blue')
col2rgb('blue')
hex(col2rgb('blue'))
col2rgb('blue') %>% as.vector
col2rgb('blue') %>% as.vector %>% hex
?sRGB
col2rgb('blue') %>% sRGB
col2rgb('blue') %>% t %>% sRGB
col2rgb('blue') %>% t %>% sRGB %>% hex
?hex
col2rgb('blue') %>% t %>% RGB %>% hex
col2rgb('#FFAAEE') %>% t
?col2rgb
col2rgb('#FFAAEE')
col2rgb('#FFAAEE') %>% as.vector
col2rgb('angry')
col2rgb('blue')
col2rgb('blue') %>% as.vector
col2rgb('blue') %>% as.vector %>% rgb
{col2rgb('blue') %>% as.vector %>% }do.call('rgb', list(.))
col2rgb('blue') %>% as.vector %>% {do.call('rgb', list(.))}
bgcolor(NA)
col2rgb(NA)
col2rgb(NA) %>% as.vector
paste0('foo', c(1,2,3), 'bar')
paste0('foo', c(1,2,3), 'bar', collapse='xxx')
library(huxtable)
library(huxtable)
library(huxtable)
?knit
knit('html-testing-doc.Rmd')
library(knitr)
knit('html-testing-doc.Rmd')
library(huxtable)
??pandoc
library(rmarkdown)
?rmarkdown
render('html-testing-doc.Rmd', clean = FALSE)
library(huxtable)
ht
knit_print(ht)
debug(knit_print.huxtable)
knit_print(ht)
?cat
?stderr
library(huxtable)
library(huxtable)
library(huxtable)
?render
render('tmp.Rmd', clean=F)
library(huxtable)
render('tmp.Rmd', clean=F)
render('tmp.Rmd', clean=F)
library(huxtable)
library(huxtable)
