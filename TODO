
TODO


* cbind, rbind methods

* set wrap to TRUE or FALSE (css: white-space:nowrap)
* think about how to set column formatting...: sig figs and arbitrary formatC args (?)
  - format() should be cell-level;
  - what about when e.g. we have a column of numbers with a char title?
  - problem is, at the moment, this autoconverts the numbers to character
  - number_format?
  - amazingly, we can have a matrix of functions...!
  mat_fns <- matrix(c(mean, median, median, mean), 2, 2)
  mat_fns[[2,2]](1:5)
  - not sure this is wise or safe, but it is apparently legit...
  mat_fns[,2] <- c(min, max)

  So:


* padding, margin
* allow column names to be put into table as option for hux, as_hux
  - maybe row names?
* testing!
* screen method
* more advanced positioning (floats?)
* as_huxtable.ftable
* "themes" i.e. standard setups for kinds of tables
* easy syntax to alter cells by row, column, area or "where"... this could be a separate package:
  - columns should allow name1:name2 style syntax, maybe also starts_with & friends
  - row names?
  - easy way to specify nrow(x), ncol(x)? How about last(1:3) and last() for default? cf. dplyr::nth
  - row & column groups
  - where(): could return a function that is called in place, something like...
  where <- function(cond) eval(bquote(function(x) which(.(substitute(cond)), arr.ind = TRUE)))
    do_something(ht, cells = where(x > 6))
  would become
    function(ht) which(ht > 6, arr.ind = TRUE)
  to be called by
    if (is.function(cells)) cells <- cells(ht)
  which then returns the relevant values, probably as a 2-column matrix (unusual form of indexing)


BUGS
* latex table width don't work (and cell widths probably wrong)
  - because you reset table spec to l/c/r in each 'multicolumn'?
* latex row height is of \\textheight when numeric, not % table height. Hard to fix
* when inserting one hux into another, row heights/col widths may no longer make sense,
  - because they are implicit proportions.

PUT OFF
* auto cell align: left for text, decimal for numbers?
  - decimal alignment doesn't work in HTML. LaTeX has dcolumn and/or siunitx... maybe skip
* new version of latex code: compute "real" details (border, cell, content) for each row?

QUESTIONS
what to do about column names? what if we want multiple rows of column headings?
maybe make it an option
do we want to have a concept of 'headers' for repetition?


# notes on latex tables
=======================

* Font color: use xcolor package
* Cell color: use colortbl package
* Rotation: use rotating
* Merged cells: multirow
* Horiz lines for partic cells: \cline{2-3} is for cells 2-3, after the relevant row
* Vertical lines for partic cells: do e.g.
\multicolumn{1}{xx|} before a line, where x is the horiz alignment (lcr)
or
\multicolumn{1}{|x|} for lines before and after

* valign for particular cells seems hard; really easiest at table level
* \midrule and \cmidrule are 'formal' compared to hline and cline
* for aligning at decimal points, use dcolumn package
* to turn text wrapping on, always use p,m and b for col specifications

Useful guides:
  http://www.andy-roberts.net/writing/latex/tables


tabular is the basic environment; package 'array' extends it, allowing top/middle/bottom valigned text;

\usepackage{array} at the start, how will this work with e.g. knitr? can we
just put it before the table?

Here's a basic table with vlines (in the colspec) and hlines between the rows:

\begin{tabular}{ l | c || r | }
\hline
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9 \\
\hline
\end{tabular}

to center the table itself surround it by \begin{center} and \end{center}
NB: hux should have an option for where to put the whole table, obv!
also \begin{tabular*} allows you specify width of whole table! (but this is getting
complex...)

For colspan, the cell shd be
\multicolumn{num_cols}{alignment}{contents}
align is l, c or r
and you should suppress the non-existent cells and their &s

For rowspan:
The first thing you need to do is add \usepackage{multirow} to the preamble. This then provides the command needed for spanning rows: \multirow{num_rows}{width}{contents}. he arguments are pretty simple to deduce. With the width parameter, you can specify a fixed with if you wish, or, if you want the natural width (i.e., just wide enough to fit the contents of the column) then simply input an asterisk (*).

For both:
\multicolumn{3}{alignment}{\multirow{2}*{CONTENTS}}

You can also use \begin{table} which can have captions etc.:
See https://www.latex-tutorial.com/tutorials/beginners/latex-tables/
and it mentions booktabs

